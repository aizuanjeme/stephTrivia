{"ast":null,"code":"var _jsxFileName = \"C:\\\\development\\\\personal\\\\trivia\\\\frontend\\\\src\\\\components\\\\QuizView.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\nconst questionsPerPlay = 5;\nlet username = \"\";\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n\n    this.selectCategory = ({\n      type,\n      id = 0\n    }) => {\n      this.setState({\n        quizCategory: {\n          type,\n          id\n        }\n      }, this.getNextQuestion);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getNextQuestion = () => {\n      const previousQuestions = [...this.state.previousQuestions];\n\n      if (this.state.currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      $.ajax({\n        url: '/quizzes',\n        //TODO: update request URL\n        type: 'POST',\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          previous_questions: previousQuestions,\n          quiz_category: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          console.log({\n            result\n          });\n\n          if (result.empty === true) {\n            this.noQuestion();\n          } else {\n            this.setState({\n              showAnswer: false,\n              previousQuestions: previousQuestions,\n              currentQuestion: result.question,\n              guess: '',\n              forceEnd: result.question ? false : true\n            });\n            return;\n          }\n        },\n        error: error => {\n          alert('Unable to load question. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitUser = event => {\n      event.preventDefault();\n      $.ajax({\n        url: '/users',\n        //TODO: update request URL\n        type: 'POST',\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          user: this.state.user\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          username = result.user.user;\n          localStorage.setItem(\"nickname\", JSON.stringify(result.user));\n          this.setState({\n            user: result.user\n          }, this.componentDidMount);\n          return;\n        },\n        error: error => {\n          alert('Unable to add category. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      let evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n      });\n      username = \"\";\n      localStorage.removeItem(\"nickname\");\n    };\n\n    this.noQuestion = () => {\n      alert('no question in this catergory'); // username=''\n\n      window.location.href = \"\".concat(window.location.origin, \"/play\");\n    };\n\n    this.renderScoreToUser = score => {\n      const user = JSON.parse(localStorage.getItem(\"nickname\"));\n      $.ajax({\n        url: \"/users/\".concat(user.id),\n        //TODO: update request URL\n        type: \"PATCH\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          'playscore': score\n        }),\n        success: result => {// targetQuestion.rating = rating\n          // this.setState({ questions })\n        },\n        error: error => {\n          alert('Unable to update the rating.');\n          return;\n        }\n      });\n    };\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess // eslint-disable-next-line\n      // .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '')\n      .toLowerCase();\n      const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n      return answerArray.every(el => formatGuess.includes(el));\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false,\n      user: ''\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: \"/categories\",\n      //TODO: update request URL\n      type: 'GET',\n      success: result => {\n        this.setState({\n          categories: result.categories\n        });\n        return;\n      },\n      error: error => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      }\n    });\n  }\n\n  renderPrePlay() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"choose-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Choose Category\"), React.createElement(\"div\", {\n      className: \"category-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"play-category\",\n      onClick: this.selectCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"ALL\"), this.state.categories.map(cat => {\n      return React.createElement(\"div\", {\n        key: cat.id,\n        value: cat.id,\n        className: \"play-category\",\n        onClick: () => this.selectCategory({\n          type: cat.type,\n          id: cat.id\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, cat.type);\n    })));\n  }\n\n  renderUser() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"mt-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Fill your nickname\"), React.createElement(\"form\", {\n      className: \"form-view\",\n      id: \"add-category-form\",\n      onSubmit: this.submitUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Nick\", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"user\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"button\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    })));\n  }\n\n  renderFinalScore() {\n    const player = JSON.parse(localStorage.getItem(\"nickname\"));\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"final-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Dear \", player.user), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), \"Your Final Score is \", this.state.numCorrect, this.renderScoreToUser(this.state.numCorrect)), React.createElement(\"div\", {\n      className: \"play-again button\",\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Play Again?\"));\n  }\n\n  renderCorrectAnswer() {\n    let evaluate = this.evaluateAnswer();\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"div\", {\n      className: \"\".concat(evaluate ? 'correct' : 'wrong'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, evaluate ? 'You were correct!' : 'You were incorrect'), React.createElement(\"div\", {\n      className: \"quiz-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, this.state.currentQuestion.answer), React.createElement(\"div\", {\n      className: \"next-question button\",\n      onClick: this.getNextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, ' ', \"Next Question\", ' '));\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"form\", {\n      onSubmit: this.submitGuess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"guess\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"submit-guess button\",\n      type: \"submit\",\n      value: \"Submit Answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    })));\n  }\n\n  render() {\n    return username !== '' ? this.state.quizCategory ? this.renderPlay() : this.renderPrePlay() : this.renderUser();\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["C:\\development\\personal\\trivia\\frontend\\src\\components\\QuizView.js"],"names":["React","Component","$","questionsPerPlay","username","QuizView","constructor","props","selectCategory","type","id","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","previousQuestions","state","currentQuestion","push","ajax","url","dataType","contentType","data","JSON","stringify","previous_questions","quiz_category","xhrFields","withCredentials","crossDomain","success","result","console","log","empty","noQuestion","showAnswer","question","guess","forceEnd","error","alert","submitUser","preventDefault","user","localStorage","setItem","componentDidMount","submitGuess","evaluate","evaluateAnswer","numCorrect","restartGame","removeItem","window","location","href","origin","renderScoreToUser","score","parse","getItem","formatGuess","toLowerCase","answerArray","answer","split","every","el","includes","categories","renderPrePlay","map","cat","renderUser","renderFinalScore","player","renderCorrectAnswer","renderPlay","length","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAO,6BAAP;AAEA,MAAMC,gBAAgB,GAAG,CAAzB;AACA,IAAIC,QAAQ,GAAG,EAAf;;AAGA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAC/BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;;AADiB,SA6BnBC,cA7BmB,GA6BF,CAAC;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,EAAE,GAAG;AAAb,KAAD,KAAsB;AACrC,WAAKC,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAE;AAAEH,UAAAA,IAAF;AAAQC,UAAAA;AAAR;AAAhB,OAAd,EAA8C,KAAKG,eAAnD;AACD,KA/BkB;;AAAA,SAiCnBC,YAjCmB,GAiCHC,KAAD,IAAW;AACxB,WAAKJ,QAAL,CAAc;AAAE,SAACI,KAAK,CAACC,MAAN,CAAaC,IAAd,GAAqBF,KAAK,CAACC,MAAN,CAAaE;AAApC,OAAd;AACD,KAnCkB;;AAAA,SAqCnBL,eArCmB,GAqCD,MAAM;AACtB,YAAMM,iBAAiB,GAAG,CAAC,GAAG,KAAKC,KAAL,CAAWD,iBAAf,CAA1B;;AACA,UAAI,KAAKC,KAAL,CAAWC,eAAX,CAA2BX,EAA/B,EAAmC;AACjCS,QAAAA,iBAAiB,CAACG,IAAlB,CAAuB,KAAKF,KAAL,CAAWC,eAAX,CAA2BX,EAAlD;AACD;;AAEDR,MAAAA,CAAC,CAACqB,IAAF,CAAO;AACLC,QAAAA,GAAG,EAAE,UADA;AACY;AACjBf,QAAAA,IAAI,EAAE,MAFD;AAGLgB,QAAAA,QAAQ,EAAE,MAHL;AAILC,QAAAA,WAAW,EAAE,kBAJR;AAKLC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,kBAAkB,EAAEX,iBADD;AAEnBY,UAAAA,aAAa,EAAE,KAAKX,KAAL,CAAWR;AAFP,SAAf,CALD;AASLoB,QAAAA,SAAS,EAAE;AACTC,UAAAA,eAAe,EAAE;AADR,SATN;AAYLC,QAAAA,WAAW,EAAE,IAZR;AAaLC,QAAAA,OAAO,EAAGC,MAAD,IAAY;AACnBC,UAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,YAAAA;AAAD,WAAZ;;AACA,cAAIA,MAAM,CAACG,KAAP,KAAiB,IAArB,EAA2B;AACzB,iBAAKC,UAAL;AACD,WAFD,MAEO;AACL,iBAAK7B,QAAL,CAAc;AACZ8B,cAAAA,UAAU,EAAE,KADA;AAEZtB,cAAAA,iBAAiB,EAAEA,iBAFP;AAGZE,cAAAA,eAAe,EAAEe,MAAM,CAACM,QAHZ;AAIZC,cAAAA,KAAK,EAAE,EAJK;AAKZC,cAAAA,QAAQ,EAAER,MAAM,CAACM,QAAP,GAAkB,KAAlB,GAA0B;AALxB,aAAd;AAOA;AACD;AACF,SA3BI;AA4BLG,QAAAA,KAAK,EAAGA,KAAD,IAAW;AAChBC,UAAAA,KAAK,CAAC,wDAAD,CAAL;AACA;AACD;AA/BI,OAAP;AAiCD,KA5EkB;;AAAA,SA8EnBC,UA9EmB,GA8ELhC,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACiC,cAAN;AACA9C,MAAAA,CAAC,CAACqB,IAAF,CAAO;AACLC,QAAAA,GAAG,EAAE,QADA;AACU;AACff,QAAAA,IAAI,EAAE,MAFD;AAGLgB,QAAAA,QAAQ,EAAE,MAHL;AAILC,QAAAA,WAAW,EAAE,kBAJR;AAKLC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBoB,UAAAA,IAAI,EAAE,KAAK7B,KAAL,CAAW6B;AADE,SAAf,CALD;AAQLjB,QAAAA,SAAS,EAAE;AACTC,UAAAA,eAAe,EAAE;AADR,SARN;AAWLC,QAAAA,WAAW,EAAE,IAXR;AAYLC,QAAAA,OAAO,EAAGC,MAAD,IAAY;AACnBhC,UAAAA,QAAQ,GAAGgC,MAAM,CAACa,IAAP,CAAYA,IAAvB;AACAC,UAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCvB,IAAI,CAACC,SAAL,CAAeO,MAAM,CAACa,IAAtB,CAAjC;AACA,eAAKtC,QAAL,CAAc;AAAEsC,YAAAA,IAAI,EAAEb,MAAM,CAACa;AAAf,WAAd,EAAqC,KAAKG,iBAA1C;AACA;AACD,SAjBI;AAkBLP,QAAAA,KAAK,EAAGA,KAAD,IAAW;AAChBC,UAAAA,KAAK,CAAC,uDAAD,CAAL;AACA;AACD;AArBI,OAAP;AAuBD,KAvGkB;;AAAA,SAyGnBO,WAzGmB,GAyGJtC,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACiC,cAAN;AACA,UAAIM,QAAQ,GAAG,KAAKC,cAAL,EAAf;AACA,WAAK5C,QAAL,CAAc;AACZ6C,QAAAA,UAAU,EAAE,CAACF,QAAD,GAAY,KAAKlC,KAAL,CAAWoC,UAAvB,GAAoC,KAAKpC,KAAL,CAAWoC,UAAX,GAAwB,CAD5D;AAEZf,QAAAA,UAAU,EAAE;AAFA,OAAd;AAID,KAhHkB;;AAAA,SAkHnBgB,WAlHmB,GAkHL,MAAM;AAClB,WAAK9C,QAAL,CAAc;AACZC,QAAAA,YAAY,EAAE,IADF;AAEZO,QAAAA,iBAAiB,EAAE,EAFP;AAGZsB,QAAAA,UAAU,EAAE,KAHA;AAIZe,QAAAA,UAAU,EAAE,CAJA;AAKZnC,QAAAA,eAAe,EAAE,EALL;AAMZsB,QAAAA,KAAK,EAAE,EANK;AAOZC,QAAAA,QAAQ,EAAE;AAPE,OAAd;AASAxC,MAAAA,QAAQ,GAAC,EAAT;AACA8C,MAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB;AACD,KA9HkB;;AAAA,SAgInBlB,UAhImB,GAgIN,MAAM;AACjBM,MAAAA,KAAK,CAAC,+BAAD,CAAL,CADiB,CAEjB;;AACAa,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,aAA0BF,MAAM,CAACC,QAAP,CAAgBE,MAA1C;AACD,KApIkB;;AAAA,SAoMnBC,iBApMmB,GAoMEC,KAAD,IAAW;AAC7B,YAAMf,IAAI,GAAGrB,IAAI,CAACqC,KAAL,CAAWf,YAAY,CAACgB,OAAb,CAAqB,UAArB,CAAX,CAAb;AACAhE,MAAAA,CAAC,CAACqB,IAAF,CAAO;AACLC,QAAAA,GAAG,mBAAYyB,IAAI,CAACvC,EAAjB,CADE;AACqB;AAC1BD,QAAAA,IAAI,EAAE,OAFD;AAGLgB,QAAAA,QAAQ,EAAE,MAHL;AAILC,QAAAA,WAAW,EAAE,kBAJR;AAKLC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAE,uBAAamC;AAAf,SAAf,CALD;AAML7B,QAAAA,OAAO,EAAGC,MAAD,IAAY,CACnB;AACA;AACD,SATI;AAULS,QAAAA,KAAK,EAAGA,KAAD,IAAW;AAChBC,UAAAA,KAAK,CAAC,8BAAD,CAAL;AACA;AACD;AAbI,OAAP;AAeD,KArNkB;;AAAA,SAuNnBS,cAvNmB,GAuNF,MAAM;AACrB,YAAMY,WAAW,GAAG,KAAK/C,KAAL,CAAWuB,KAAX,CAClB;AACA;AAFkB,OAGjByB,WAHiB,EAApB;AAIA,YAAMC,WAAW,GAAG,KAAKjD,KAAL,CAAWC,eAAX,CAA2BiD,MAA3B,CACjBF,WADiB,GAEjBG,KAFiB,CAEX,GAFW,CAApB;AAGA,aAAOF,WAAW,CAACG,KAAZ,CAAmBC,EAAD,IAAQN,WAAW,CAACO,QAAZ,CAAqBD,EAArB,CAA1B,CAAP;AACD,KAhOkB;;AAEjB,SAAKrD,KAAL,GAAa;AACXR,MAAAA,YAAY,EAAE,IADH;AAEXO,MAAAA,iBAAiB,EAAE,EAFR;AAGXsB,MAAAA,UAAU,EAAE,KAHD;AAIXkC,MAAAA,UAAU,EAAE,EAJD;AAKXnB,MAAAA,UAAU,EAAE,CALD;AAMXnC,MAAAA,eAAe,EAAE,EANN;AAOXsB,MAAAA,KAAK,EAAE,EAPI;AAQXC,MAAAA,QAAQ,EAAE,KARC;AASXK,MAAAA,IAAI,EAAE;AATK,KAAb;AAWD;;AACDG,EAAAA,iBAAiB,GAAG;AAClBlD,IAAAA,CAAC,CAACqB,IAAF,CAAO;AACLC,MAAAA,GAAG,eADE;AACe;AACpBf,MAAAA,IAAI,EAAE,KAFD;AAGL0B,MAAAA,OAAO,EAAGC,MAAD,IAAY;AACnB,aAAKzB,QAAL,CAAc;AAAEgE,UAAAA,UAAU,EAAEvC,MAAM,CAACuC;AAArB,SAAd;AACA;AACD,OANI;AAOL9B,MAAAA,KAAK,EAAGA,KAAD,IAAW;AAChBC,QAAAA,KAAK,CAAC,0DAAD,CAAL;AACA;AACD;AAVI,KAAP;AAYD;;AA2GD8B,EAAAA,aAAa,GAAG;AACd,WACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAA+B,MAAA,OAAO,EAAE,KAAKpE,cAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAII,KAAKY,KAAL,CAAWuD,UAAZ,CAAwBE,GAAxB,CAA6BC,GAAD,IAAS;AACpC,aACE;AACE,QAAA,GAAG,EAAEA,GAAG,CAACpE,EADX;AAEE,QAAA,KAAK,EAAEoE,GAAG,CAACpE,EAFb;AAGE,QAAA,SAAS,EAAC,eAHZ;AAIE,QAAA,OAAO,EAAE,MACP,KAAKF,cAAL,CAAoB;AAAEC,UAAAA,IAAI,EAAEqE,GAAG,CAACrE,IAAZ;AAAkBC,UAAAA,EAAE,EAAEoE,GAAG,CAACpE;AAA1B,SAApB,CALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQGoE,GAAG,CAACrE,IARP,CADF;AAYD,KAbA,CAJH,CAFF,CADF;AAwBD;;AAEDsE,EAAAA,UAAU,GAAG;AACX,WACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,EAEE;AACE,MAAA,SAAS,EAAC,WADZ;AAEE,MAAA,EAAE,EAAC,mBAFL;AAGE,MAAA,QAAQ,EAAE,KAAKhC,UAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,QAAQ,EAAE,KAAKjC,YAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CALF,EASE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,SAAS,EAAC,QAA/B;AAAwC,MAAA,KAAK,EAAC,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,CAFF,CADF;AAgBD;;AAEDkE,EAAAA,gBAAgB,GAAG;AACjB,UAAMC,MAAM,GAAGrD,IAAI,CAACqC,KAAL,CAAWf,YAAY,CAACgB,OAAb,CAAqB,UAArB,CAAX,CAAf;AACA,WACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAUe,MAAM,CAAChC,IAAjB,CADF,EAC6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD7B,0BAEuB,KAAK7B,KAAL,CAAWoC,UAFlC,EAGG,KAAKO,iBAAL,CAAuB,KAAK3C,KAAL,CAAWoC,UAAlC,CAHH,CADF,EAME;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAmC,MAAA,OAAO,EAAE,KAAKC,WAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBANF,CADF;AAYD;;AAgCDyB,EAAAA,mBAAmB,GAAG;AACpB,QAAI5B,QAAQ,GAAG,KAAKC,cAAL,EAAf;AACA,WACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKnC,KAAL,CAAWC,eAAX,CAA2BqB,QAD9B,CADF,EAIE;AAAK,MAAA,SAAS,YAAKY,QAAQ,GAAG,SAAH,GAAe,OAA5B,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,QAAQ,GAAG,mBAAH,GAAyB,oBADpC,CAJF,EAOE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8B,KAAKlC,KAAL,CAAWC,eAAX,CAA2BiD,MAAzD,CAPF,EAQE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAsC,MAAA,OAAO,EAAE,KAAKzD,eAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,GADH,mBAEgB,GAFhB,CARF,CADF;AAeD;;AAEDsE,EAAAA,UAAU,GAAG;AACX,WAAO,KAAK/D,KAAL,CAAWD,iBAAX,CAA6BiE,MAA7B,KAAwCjF,gBAAxC,IACL,KAAKiB,KAAL,CAAWwB,QADN,GAEL,KAAKoC,gBAAL,EAFK,GAGH,KAAK5D,KAAL,CAAWqB,UAAX,GACF,KAAKyC,mBAAL,EADE,GAGF;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK9D,KAAL,CAAWC,eAAX,CAA2BqB,QAD9B,CADF,EAIE;AAAM,MAAA,QAAQ,EAAE,KAAKW,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,QAAQ,EAAE,KAAKvC,YAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AACE,MAAA,SAAS,EAAC,qBADZ;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,KAAK,EAAC,eAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAJF,CANF;AAoBD;;AAEDuE,EAAAA,MAAM,GAAG;AACP,WAAOjF,QAAQ,KAAK,EAAb,GAAkB,KAAKgB,KAAL,CAAWR,YAAX,GAA0B,KAAKuE,UAAL,EAA1B,GAA8C,KAAKP,aAAL,EAAhE,GAAuF,KAAKG,UAAL,EAA9F;AACD;;AA/Q8B;;AAkRjC,eAAe1E,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\n\nconst questionsPerPlay = 5;\nlet username = \"\"\n\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false,\n      user: ''\n    };\n  }\n  componentDidMount() {\n    $.ajax({\n      url: `/categories`, //TODO: update request URL\n      type: 'GET',\n      success: (result) => {\n        this.setState({ categories: result.categories });\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      },\n    });\n  }\n\n  selectCategory = ({ type, id = 0 }) => {\n    this.setState({ quizCategory: { type, id } }, this.getNextQuestion);\n  };\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  getNextQuestion = () => {\n    const previousQuestions = [...this.state.previousQuestions];\n    if (this.state.currentQuestion.id) {\n      previousQuestions.push(this.state.currentQuestion.id);\n    }\n\n    $.ajax({\n      url: '/quizzes', //TODO: update request URL\n      type: 'POST',\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        previous_questions: previousQuestions,\n        quiz_category: this.state.quizCategory,\n      }),\n      xhrFields: {\n        withCredentials: true,\n      },\n      crossDomain: true,\n      success: (result) => {\n        console.log({result})\n        if (result.empty === true) {\n          this.noQuestion()\n        } else {\n          this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            guess: '',\n            forceEnd: result.question ? false : true,\n          });\n          return;\n        }\n      },\n      error: (error) => {\n        alert('Unable to load question. Please try your request again');\n        return;\n      },\n    });\n  };\n\n  submitUser = (event) => {\n    event.preventDefault();\n    $.ajax({\n      url: '/users', //TODO: update request URL\n      type: 'POST',\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        user: this.state.user,\n      }),\n      xhrFields: {\n        withCredentials: true,\n      },\n      crossDomain: true,\n      success: (result) => {\n        username = result.user.user\n        localStorage.setItem(\"nickname\", JSON.stringify(result.user));\n        this.setState({ user: result.user }, this.componentDidMount);\n        return;\n      },\n      error: (error) => {\n        alert('Unable to add category. Please try your request again');\n        return;\n      },\n    });\n  };\n\n  submitGuess = (event) => {\n    event.preventDefault();\n    let evaluate = this.evaluateAnswer();\n    this.setState({\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n      showAnswer: true,\n    });\n  };\n\n  restartGame = () => {\n    this.setState({\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false,\n    });\n    username=\"\"\n    localStorage.removeItem(\"nickname\")\n  };\n\n  noQuestion = () => {\n    alert('no question in this catergory')\n    // username=''\n    window.location.href = `${window.location.origin}/play`;    \n  };\n\n  renderPrePlay() {\n    return (\n      <div className='quiz-play-holder'>\n        <div className='choose-header'>Choose Category</div>\n        <div className='category-holder'>\n          <div className='play-category' onClick={this.selectCategory}>\n            ALL\n          </div>\n          {(this.state.categories).map((cat) => {\n            return (\n              <div\n                key={cat.id}\n                value={cat.id}\n                className='play-category'\n                onClick={() =>\n                  this.selectCategory({ type: cat.type, id: cat.id })\n                }\n              >\n                {cat.type}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  renderUser() {\n    return (\n      <div className='quiz-play-holder'>\n        <h2 className='mt-3'>Fill your nickname</h2>\n        <form\n          className='form-view'\n          id='add-category-form'\n          onSubmit={this.submitUser}\n        >\n          <label>\n            Nick\n            <input type='text' name='user' onChange={this.handleChange} />\n          </label>\n          <input type='submit' className='button' value='Submit' />\n        </form>\n      </div>\n    );\n  }\n\n  renderFinalScore() {\n    const player = JSON.parse(localStorage.getItem(\"nickname\"));\n    return (\n      <div className='quiz-play-holder'>\n        <div className='final-header'>\n          <h4>Dear {player.user}</h4><br />\n          Your Final Score is {this.state.numCorrect}\n          {this.renderScoreToUser(this.state.numCorrect)}\n        </div>\n        <div className='play-again button' onClick={this.restartGame}>\n          Play Again?\n        </div>\n      </div>\n    );\n  }\n\n  renderScoreToUser = (score) => {\n    const user = JSON.parse(localStorage.getItem(\"nickname\"));\n    $.ajax({\n      url: `/users/${user.id}`, //TODO: update request URL\n      type: \"PATCH\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({ 'playscore': score }),\n      success: (result) => {\n        // targetQuestion.rating = rating\n        // this.setState({ questions })\n      },\n      error: (error) => {\n        alert('Unable to update the rating.')\n        return;\n      }\n    })\n  }\n\n  evaluateAnswer = () => {\n    const formatGuess = this.state.guess\n      // eslint-disable-next-line\n      // .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '')\n      .toLowerCase();\n    const answerArray = this.state.currentQuestion.answer\n      .toLowerCase()\n      .split(' ');\n    return answerArray.every((el) => formatGuess.includes(el));\n  };\n\n  renderCorrectAnswer() {\n    let evaluate = this.evaluateAnswer();\n    return (\n      <div className='quiz-play-holder'>\n        <div className='quiz-question'>\n          {this.state.currentQuestion.question}\n        </div>\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>\n          {evaluate ? 'You were correct!' : 'You were incorrect'}\n        </div>\n        <div className='quiz-answer'>{this.state.currentQuestion.answer}</div>\n        <div className='next-question button' onClick={this.getNextQuestion}>\n          {' '}\n          Next Question{' '}\n        </div>\n      </div>\n    );\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay ||\n      this.state.forceEnd ? (\n      this.renderFinalScore()\n    ) : this.state.showAnswer ? (\n      this.renderCorrectAnswer()\n    ) : (\n      <div className='quiz-play-holder'>\n        <div className='quiz-question'>\n          {this.state.currentQuestion.question}\n        </div>\n        <form onSubmit={this.submitGuess}>\n          <input type='text' name='guess' onChange={this.handleChange} />\n          <input\n            className='submit-guess button'\n            type='submit'\n            value='Submit Answer'\n          />\n        </form>\n      </div>\n    );\n  }\n\n  render() {\n    return username !== '' ? this.state.quizCategory ? this.renderPlay() : this.renderPrePlay() : this.renderUser();\n  }\n}\n\nexport default QuizView;\n"]},"metadata":{},"sourceType":"module"}